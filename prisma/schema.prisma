// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String
  email             String             @unique
  isEmailConfirmed  Boolean            @default(false)
  password          String
  roleId            String             @db.ObjectId
  Role              Role               @relation(fields: [roleId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  RegistrationToken RegistrationToken?
  Book              Book[]

  @@map("users")
}

model Book {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  author    String
  finished  Boolean  @default(false)
  userId    String   @db.ObjectId
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("books")
}

model RegistrationToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  token       String   @unique
  isTokenUsed Boolean  @default(false)
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime

  @@map("registration_tokens")
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]

  @@map("roles")
}
